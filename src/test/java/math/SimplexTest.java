package math;

import coefficients.Coefficients;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class SimplexTest {

    @Test
    public void testSimplexMaximization() {
        assertEquals(
                "[3,12]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(3)
                                .addCoefficient(2)
                                .build())
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(2)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(18))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(2)
                                        .addCoefficient(3)
                                        .build(),
                                Coefficients.from(42))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(3)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(24))
                        .build()
                        .getOptimalSolution()
                        .toString()
        );

        assertEquals(
                "[0,3/2]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(4)
                                .addCoefficient(3)
                                .build())
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(2)
                                        .addCoefficient(3)
                                        .build(),
                                Coefficients.from(6))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(3)
                                        .addCoefficient(2)
                                        .build(),
                                Coefficients.from(3))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(0)
                                        .addCoefficient(2)
                                        .build(),
                                Coefficients.from(5))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(2)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(4))
                        .build()
                        .getOptimalSolution()
                        .toString());

        assertEquals(
                "[2,0,1]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(5)
                                .addCoefficient(4)
                                .addCoefficient(3)
                                .build())
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(2)
                                        .addCoefficient(3)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(5))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(4)
                                        .addCoefficient(1)
                                        .addCoefficient(2)
                                        .build(),
                                Coefficients.from(11))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(3)
                                        .addCoefficient(4)
                                        .addCoefficient(2)
                                        .build(),
                                Coefficients.from(8))
                        .build()
                        .getOptimalSolution()
                        .toString());
    }

    @Test
    public void testSimplexMaximizationWithEqualityConstraint() {
        assertEquals(
                "[10,0]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(2)
                                .addCoefficient(1)
                                .build())
                        .addEquality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(10))
                        .build()
                        .getOptimalSolution()
                        .toString()
        );
    }

    @Test
    public void testSimplexMaximizationWithEqualityAndInequalityConstraint() {
        assertEquals(
                "[5,15]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(2)
                                .addCoefficient(1)
                                .build())
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(20))
                        .addEquality(Vector.newBuilder()
                                        .addCoefficient(3)
                                        .addCoefficient(-1)
                                        .build(),
                                Coefficients.from(0))
                        .build()
                        .getOptimalSolution()
                        .toString()
        );

        assertEquals(
                "[5/4,15/4]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(2)
                                .addCoefficient(1)
                                .build())
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(20))
                        .addEquality(Vector.newBuilder()
                                        .addCoefficient(3)
                                        .addCoefficient(-1)
                                        .build(),
                                Coefficients.from(0))
                        .addEquality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(5))
                        .build()
                        .getOptimalSolution()
                        .toString()
        );

        assertEquals(
                "[5/4,15/4]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(2)
                                .addCoefficient(1)
                                .build())
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(20))
                        .addEquality(Vector.newBuilder()
                                        .addCoefficient(3)
                                        .addCoefficient(-1)
                                        .build(),
                                Coefficients.from(0))
                        .addEquality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(5))
                        .addEquality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(6))
                        .build()
                        .getOptimalSolution()
                        .toString()
        );
    }

    @Test
    public void testMinimizationWithGreaterThanInequality() {
        assertEquals(
                "[0,1]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(-2)
                                .addCoefficient(-1)
                                .build())
                        .addGreaterThanInequality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(1))
                        .build()
                        .getOptimalSolution()
                        .toString()
        );
    }


    @Test
    public void testMaximizationWithLessThanAndGreaterThanInequality() {
        assertEquals(
                "[2,0]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(2)
                                .addCoefficient(1)
                                .build())
                        .addGreaterThanInequality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(1))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(2))
                        .build()
                        .getOptimalSolution()
                        .toString()
        );
    }

    @Test
    public void testMaximizationWithAllThreeTypesOfInequalities() {
        assertEquals(
                "[2,0,2]",
                Simplex.newBuilder()
                        .withCostVector(Vector.newBuilder()
                                .addCoefficient(2)
                                .addCoefficient(-1)
                                .addCoefficient(3)
                                .build())
                        .addEquality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(4))
                        .addGreaterThanInequality(Vector.newBuilder()
                                        .addCoefficient(1)
                                        .addCoefficient(-2)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(3))
                        .addLessThanInequality(Vector.newBuilder()
                                        .addCoefficient(0)
                                        .addCoefficient(2)
                                        .addCoefficient(1)
                                        .build(),
                                Coefficients.from(2))
                        .build()
                        .getOptimalSolution()
                        .toString()
        );
    }
}
